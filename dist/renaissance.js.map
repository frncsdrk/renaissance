{
  "version": 3,
  "sources": [
    "src/renaissance.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# renaissance core\nclass Component\n  ###\n  component\n  @constructor\n  @returns {object} this\n  ###\n  constructor: () ->\n    this._events = {}\n\n    # to be defined in component extending class\n    this.after('init', this.init)\n    this.onInit()\n\n    this\n\n  ###\n  trigger component event handlers\n  @param {string} event\n  @param {object} data\n  ###\n  trigger: (event, data) ->\n    beforeArr = this._events['before.' + event]\n    eventArr = this._events[event]\n    afterArr = this._events['after.' + event]\n    triggered =\n      before: false\n      event: false\n      after: false\n\n    if Array.isArray(beforeArr) and beforeArr.length > 0\n      # runBefore = (fn) -> fn(data)\n      # (fn) -> fn(data) for fn in beforeArr\n      for fn in beforeArr\n        do (fn) ->\n          fn(data)\n      # for (let i = 0; i < beforeArr.length; i++) {\n      #   beforeArr[i](data)\n      # }\n      triggered.before = true\n\n    if Array.isArray(eventArr) and eventArr.length > 0\n      # (fn) -> fn(data) for fn in eventArr\n      for fn in eventArr\n        do (fn) ->\n          fn(data)\n      # for (let i = 0; i < eventArr.length; i++) {\n      #   eventArr[i](data)\n      # }\n      triggered.event = true\n\n    if Array.isArray(afterArr) and afterArr.length > 0\n      for fn in afterArr\n        do (fn) ->\n          fn(data)\n      # for (let i = 0; i < afterArr.length; i++) {\n      #   afterArr[i](data)\n      # }\n      triggered.after = true\n\n    triggered\n\n  ###\n  register before event\n  @param {string} event\n  @param {function} callback\n  ###\n  before: (event, callback) ->\n    return false if typeof callback isnt 'function'\n\n    if not Array.isArray(this._events['before.' + event])\n      this._events['before.' + event] = []\n\n    this._events['before.' + event].push(callback)\n\n  ###\n  add an event handler on component\n  @param {string} event\n  @param {function} callback\n  @returns {*}\n  ###\n  on: (event, callback) ->\n    return false if typeof callback isnt 'function'\n\n    if not Array.isArray(this._events[event])\n      this._events[event] = []\n\n    this._events[event].push(callback)\n\n  ###\n  register after event\n  @param {string} event\n  @param {function} callback\n  ###\n  after: (event, callback) ->\n    return false if typeof callback isnt 'function'\n\n    if not Array.isArray(this._events['after.' + event])\n      this._events['after.' + event] = []\n\n    this._events['after.' + event].push(callback)\n\n  ###\n  callback for component instantiation\n  ###\n  onInit: () ->\n    this.trigger('init', this)\n\nclass Renaissance\n  constructor: () ->\n    # private\n    # registry filled and emptied when attaching and unattaching components to DOM\n    # renaissance.registry = {};\n    # renaissance.components = {};\n    this.adapters = {}\n\n    this\n\n  # private / only available for adapter and drink creators\n  ###\n  register component internally\n  @param {string} name\n  @param {object} Component\n  @returns {object} component\n  ###\n  ###\n  registerComponent(name, Component) {\n      this.components[name] = Component;\n      // event handlers\n      if (typeof component.afterMap['init'] === 'function') {\n          component.afterMap['init'](component);\n      }\n\n      return component;\n  };\n  ###\n  ###\n  register an Adapter\n  @param {string} name\n  @param {constructor} Adapter\n  ###\n  registerAdapter: (name, Adapter) ->\n    # if name already defined on this, omit registration\n    return if typeof this.adapters[name] isnt 'undefined'\n      false\n\n    adapter = new Adapter()\n    this.adapters[name] = adapter\n    adapter\n\n  ###\n  register a mixin\n  @param {string} name\n  @param {constructor} Component\n  @param {function} callback\n  @returns {boolean}\n  ###\n  registerMixin: (name, Component, callback) ->\n    # avoid overwriting other functionality\n    return if typeof Component.prototype[name] isnt 'undefined'\n      false\n\n    # register drink on component prototype\n    Component.prototype[name] = callback\n\n    true\n\n  ###\n  register a plugin\n  @param {string} name\n  @param {constructor} Plugin\n  @return {boolean} registered\n  ###\n  registerPlugin: (name, Plugin) ->\n    # if name already defined on this, omit registration\n    return if typeof this[name] isnt 'undefined'\n      false\n\n    # register plugin function on renaissance prototype\n    this[name] = new Plugin(this)\n\n    true\n\ninstance = new Renaissance()\nrenaissance = instance\nr = instance\n\nmodule.exports = {\n  Renaissance,\n  renaissance,\n  r,\n  Component\n}\n"
  ],
  "sourceRoot": ".."
}